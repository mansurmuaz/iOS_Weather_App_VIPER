//
//  HomeInteractor.swift
//  Wheather App 2
//
//  Created by Mansur Muaz  Ekici on 16.07.2018.
//  Copyright (c) 2018 Adesso. All rights reserved.
//
//  Template generated by Zafer Caliskan

import Foundation

class HomeInteractor: BaseInteractor {
    
    // MARK: - Dependencies
    
    var presenter: HomePresenterInteractorProtocol!
    
    // MARK: - Initialization
    
    override init(networkService: NetworkService? = nil, coreDataService: CoreDataService? = nil) {
        super.init(networkService: networkService, coreDataService: coreDataService)
    }
    
    // MARK: - Business Logic
}

// MARK: - Extnensions

// MARK: - Protocols Implemantations

extension HomeInteractor: HomeInteractorProtocol {
    
    func deleteLocation(location: Location) {
        coreDataService.delete(location: location)
    }
    
    func fetchBookmarkWeathers(bookmarks: [Location]) {
        if !bookmarks.isEmpty {
            for (index, location) in bookmarks.enumerated() {
                let bookmarkLat = location.latitude
                let bookmarkLon = location.longitude
                
                if let languageCode = Locale.current.languageCode {
                    let unit = UserDefaults.standard.string(forKey: "unit") ?? "metric"
                    if let url = URL(string: NetworkConstants.weather + "?lat=\(bookmarkLat)&lon=\(bookmarkLon)&units=\(unit)&lang=\(languageCode)&appid=" + NetworkConstants.apiKey) {
                        networkService.getJSON(url: url, success: { (json) in
                            self.presenter.addToBookmarkWeathers(weather: WeatherModel(json: json), index: index)
                        }, failure: { (error) in
                            print(error)
                        })
                    }
                }
            }
        }
    }
    
    func getBookmarks() {
        
        if let bookmarkLocations = coreDataService.fetchLocations() {
            presenter.getBookmarkWeathers(bookmarks: bookmarkLocations)
        }
    }
    
    func getCurrrentWeather(lat: Double, lon: Double) {
        if let languageCode = Locale.current.languageCode {
            let unit = UserDefaults.standard.string(forKey: "unit") ?? "metric"
            if let url = URL(string: NetworkConstants.weather + "?lat=\(lat)&lon=\(lon)&units=\(unit)&lang=\(languageCode)&appid=" + NetworkConstants.apiKey) {
                
                networkService.getJSON(url: url, success: { (json) in
                    self.presenter.setCurrentWeather(currentWeather: WeatherModel(json: json))
                    
                }, failure: { (error) in
                    print(error)
                })
            }
        }
    }
}
